import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import SGDRegressor
from sklearn.preprocessing import StandardScaler


X_train = np.array([[952, 2, 1, 65], [1244, 3, 2, 64], [1947, 3, 2, 17]])
y_train = np.array([271.5, 232, 509.8])

X_features = ['size(sqft)','bedrooms','floors','age']

#SGDRegressor is for implementing gradient descent

#StandardScaler is used for Z-Score Normalizing the dataset

scaler = StandardScaler()
X_normalized = scaler.fit_transform(X_train)

sgdr = SGDRegressor(max_iter=1500)
sgdr.fit(X_normalized, y_train)
print(sgdr)
print(f"number of iterations completed: {sgdr.n_iter_}, number of weight updates: {sgdr.t_}")


b_norm = sgdr.intercept_
w_norm = sgdr.coef_

# make a prediction using sgdr.predict()
y_pred_sgd = sgdr.predict(X_normalized)


fig,ax=plt.subplots(1,4,figsize=(12,3),sharey=True)
for i in range(len(ax)):
    ax[i].scatter(X_train[:,i],y_train, label = 'target', color='r')
    ax[i].set_xlabel(X_features[i])
    ax[i].scatter(X_train[:,i],y_pred_sgd,color='b', label = 'predict')
ax[0].set_ylabel("Price"); ax[0].legend()
fig.suptitle("target versus prediction using z-score normalized model")
plt.show()